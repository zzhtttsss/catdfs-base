syntax="proto3";
package pb;
option go_package="/pb";

// CheckAndGetArgs
// path: target path to get
message CheckAndGetArgs {
  string path = 1;
}

// CheckAndGetReply
// fileNodeId: file id stored in the directory tree
// chunkNum: the number of chunks the file will be cut into
// operationId: the get operation id stored in the edits
message CheckAndGetReply {
  string fileNodeId = 1;
  int32 chunkNum = 2;
  string operationId = 3;
}

// GetDataNodes4GetArgs
// fileNodeId: file id stored in the directory tree
// chunkIndex: the index of chunk
message GetDataNodes4GetArgs {
  string fileNodeId = 1;
  int32 chunkIndex = 2;
}

// GetDataNodes4GetReply
// primaryNodeId: id of the primary DataNode
// primaryNodeAddr: address of the primary DataNode
// chunkIndex: index of current chunk index of the file
// chunkSize: the size of current chunk
message GetDataNodes4GetReply {
  repeated string dataNodeIds = 1;
  repeated string dataNodeAddrs = 2;
  int32 chunkIndex = 3;
  int64 chunkSize = 4;

}

// SetupStream2DataNodeArgs sets up the stream with the datanode and then transfer data
// clientAddr: address of the client
// chunkId: fileNodeId+chunkIndex which represents a chunk
// dataNodeId: id of dataNode
message SetupStream2DataNodeArgs {
  string clientPort = 1;
  string chunkId = 2;
  string dataNodeId = 3;
}

message SetupStream2DataNodeReply {

}

// ReleaseLease4GetArgs
// chunkId: id of chunk which has been stored by chunkserver and need to release its lease
message ReleaseLease4GetArgs {
  string chunkId = 1;
}

message ReleaseLease4GetReply {
}

service MasterGetService {
  // CheckAndGet Called by client.
  // Check whether the path and file name entered by the user in the Add operation are legal.
  rpc CheckAndGet(CheckAndGetArgs) returns(CheckAndGetReply);

  // GetDataNodes4Get Called by client.
  // Allocate some DataNode to store a Chunk and select the primary DataNode
  rpc GetDataNodes4Get(GetDataNodes4GetArgs) returns(GetDataNodes4GetReply);

  // ReleaseLease4Add Called by client.
  // Release the lease of a chunk.
  rpc ReleaseLease4Get(ReleaseLease4GetArgs) returns(ReleaseLease4GetReply);
}

//The same as "PieceOfChunk". Waiting to refine.
message Piece {
  bytes piece=1;
}

service SetupStream {
  // SetupStream2DataNode Called by client.
  // Set up the stream between client and chunkserver, then chunkserver returns data
  rpc SetupStream2DataNode(SetupStream2DataNodeArgs) returns(stream Piece);
}