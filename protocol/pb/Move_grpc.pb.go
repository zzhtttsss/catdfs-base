// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: Move.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterMoveServiceClient is the client API for MasterMoveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterMoveServiceClient interface {
	// CheckAndMove Called by client.
	// Check args and move directory or file to target path.
	CheckAndMove(ctx context.Context, in *CheckAndMoveArgs, opts ...grpc.CallOption) (*CheckAndMoveReply, error)
}

type masterMoveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterMoveServiceClient(cc grpc.ClientConnInterface) MasterMoveServiceClient {
	return &masterMoveServiceClient{cc}
}

func (c *masterMoveServiceClient) CheckAndMove(ctx context.Context, in *CheckAndMoveArgs, opts ...grpc.CallOption) (*CheckAndMoveReply, error) {
	out := new(CheckAndMoveReply)
	err := c.cc.Invoke(ctx, "/pb.MasterMoveService/CheckAndMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterMoveServiceServer is the server API for MasterMoveService service.
// All implementations must embed UnimplementedMasterMoveServiceServer
// for forward compatibility
type MasterMoveServiceServer interface {
	// CheckAndMove Called by client.
	// Check args and move directory or file to target path.
	CheckAndMove(context.Context, *CheckAndMoveArgs) (*CheckAndMoveReply, error)
	mustEmbedUnimplementedMasterMoveServiceServer()
}

// UnimplementedMasterMoveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMasterMoveServiceServer struct {
}

func (UnimplementedMasterMoveServiceServer) CheckAndMove(context.Context, *CheckAndMoveArgs) (*CheckAndMoveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAndMove not implemented")
}
func (UnimplementedMasterMoveServiceServer) mustEmbedUnimplementedMasterMoveServiceServer() {}

// UnsafeMasterMoveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterMoveServiceServer will
// result in compilation errors.
type UnsafeMasterMoveServiceServer interface {
	mustEmbedUnimplementedMasterMoveServiceServer()
}

func RegisterMasterMoveServiceServer(s grpc.ServiceRegistrar, srv MasterMoveServiceServer) {
	s.RegisterService(&MasterMoveService_ServiceDesc, srv)
}

func _MasterMoveService_CheckAndMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAndMoveArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterMoveServiceServer).CheckAndMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MasterMoveService/CheckAndMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterMoveServiceServer).CheckAndMove(ctx, req.(*CheckAndMoveArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterMoveService_ServiceDesc is the grpc.ServiceDesc for MasterMoveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterMoveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MasterMoveService",
	HandlerType: (*MasterMoveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAndMove",
			Handler:    _MasterMoveService_CheckAndMove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Move.proto",
}
