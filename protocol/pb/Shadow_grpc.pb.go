// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: Shadow.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SendOperationServiceClient is the client API for SendOperationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendOperationServiceClient interface {
	SendOperation(ctx context.Context, in *OperationArgs, opts ...grpc.CallOption) (*OperationReply, error)
	FinishOperation(ctx context.Context, in *OperationArgs, opts ...grpc.CallOption) (*OperationReply, error)
}

type sendOperationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSendOperationServiceClient(cc grpc.ClientConnInterface) SendOperationServiceClient {
	return &sendOperationServiceClient{cc}
}

func (c *sendOperationServiceClient) SendOperation(ctx context.Context, in *OperationArgs, opts ...grpc.CallOption) (*OperationReply, error) {
	out := new(OperationReply)
	err := c.cc.Invoke(ctx, "/pb.SendOperationService/SendOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendOperationServiceClient) FinishOperation(ctx context.Context, in *OperationArgs, opts ...grpc.CallOption) (*OperationReply, error) {
	out := new(OperationReply)
	err := c.cc.Invoke(ctx, "/pb.SendOperationService/FinishOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendOperationServiceServer is the server API for SendOperationService service.
// All implementations must embed UnimplementedSendOperationServiceServer
// for forward compatibility
type SendOperationServiceServer interface {
	SendOperation(context.Context, *OperationArgs) (*OperationReply, error)
	FinishOperation(context.Context, *OperationArgs) (*OperationReply, error)
	mustEmbedUnimplementedSendOperationServiceServer()
}

// UnimplementedSendOperationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSendOperationServiceServer struct {
}

func (UnimplementedSendOperationServiceServer) SendOperation(context.Context, *OperationArgs) (*OperationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOperation not implemented")
}
func (UnimplementedSendOperationServiceServer) FinishOperation(context.Context, *OperationArgs) (*OperationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishOperation not implemented")
}
func (UnimplementedSendOperationServiceServer) mustEmbedUnimplementedSendOperationServiceServer() {}

// UnsafeSendOperationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendOperationServiceServer will
// result in compilation errors.
type UnsafeSendOperationServiceServer interface {
	mustEmbedUnimplementedSendOperationServiceServer()
}

func RegisterSendOperationServiceServer(s grpc.ServiceRegistrar, srv SendOperationServiceServer) {
	s.RegisterService(&SendOperationService_ServiceDesc, srv)
}

func _SendOperationService_SendOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendOperationServiceServer).SendOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SendOperationService/SendOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendOperationServiceServer).SendOperation(ctx, req.(*OperationArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendOperationService_FinishOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendOperationServiceServer).FinishOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SendOperationService/FinishOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendOperationServiceServer).FinishOperation(ctx, req.(*OperationArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// SendOperationService_ServiceDesc is the grpc.ServiceDesc for SendOperationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendOperationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SendOperationService",
	HandlerType: (*SendOperationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOperation",
			Handler:    _SendOperationService_SendOperation_Handler,
		},
		{
			MethodName: "FinishOperation",
			Handler:    _SendOperationService_FinishOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Shadow.proto",
}
