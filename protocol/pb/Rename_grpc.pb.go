// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: Rename.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterRenameServiceClient is the client API for MasterRenameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterRenameServiceClient interface {
	// CheckAndRename Called by client.
	// Check args and rename the file which is in the path to newName.
	CheckAndRename(ctx context.Context, in *CheckAndRenameArgs, opts ...grpc.CallOption) (*CheckAndRenameReply, error)
}

type masterRenameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterRenameServiceClient(cc grpc.ClientConnInterface) MasterRenameServiceClient {
	return &masterRenameServiceClient{cc}
}

func (c *masterRenameServiceClient) CheckAndRename(ctx context.Context, in *CheckAndRenameArgs, opts ...grpc.CallOption) (*CheckAndRenameReply, error) {
	out := new(CheckAndRenameReply)
	err := c.cc.Invoke(ctx, "/pb.MasterRenameService/CheckAndRename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterRenameServiceServer is the server API for MasterRenameService service.
// All implementations must embed UnimplementedMasterRenameServiceServer
// for forward compatibility
type MasterRenameServiceServer interface {
	// CheckAndRename Called by client.
	// Check args and rename the file which is in the path to newName.
	CheckAndRename(context.Context, *CheckAndRenameArgs) (*CheckAndRenameReply, error)
	mustEmbedUnimplementedMasterRenameServiceServer()
}

// UnimplementedMasterRenameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMasterRenameServiceServer struct {
}

func (UnimplementedMasterRenameServiceServer) CheckAndRename(context.Context, *CheckAndRenameArgs) (*CheckAndRenameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAndRename not implemented")
}
func (UnimplementedMasterRenameServiceServer) mustEmbedUnimplementedMasterRenameServiceServer() {}

// UnsafeMasterRenameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterRenameServiceServer will
// result in compilation errors.
type UnsafeMasterRenameServiceServer interface {
	mustEmbedUnimplementedMasterRenameServiceServer()
}

func RegisterMasterRenameServiceServer(s grpc.ServiceRegistrar, srv MasterRenameServiceServer) {
	s.RegisterService(&MasterRenameService_ServiceDesc, srv)
}

func _MasterRenameService_CheckAndRename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAndRenameArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRenameServiceServer).CheckAndRename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MasterRenameService/CheckAndRename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRenameServiceServer).CheckAndRename(ctx, req.(*CheckAndRenameArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterRenameService_ServiceDesc is the grpc.ServiceDesc for MasterRenameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterRenameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MasterRenameService",
	HandlerType: (*MasterRenameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAndRename",
			Handler:    _MasterRenameService_CheckAndRename_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Rename.proto",
}
