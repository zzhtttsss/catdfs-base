// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: List.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterListServiceClient is the client API for MasterListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterListServiceClient interface {
	// CheckAndList Called by client.
	// Check args and list all directories or files under target path.
	CheckAndList(ctx context.Context, in *CheckAndListArgs, opts ...grpc.CallOption) (*CheckAndListReply, error)
}

type masterListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterListServiceClient(cc grpc.ClientConnInterface) MasterListServiceClient {
	return &masterListServiceClient{cc}
}

func (c *masterListServiceClient) CheckAndList(ctx context.Context, in *CheckAndListArgs, opts ...grpc.CallOption) (*CheckAndListReply, error) {
	out := new(CheckAndListReply)
	err := c.cc.Invoke(ctx, "/pb.MasterListService/CheckAndList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterListServiceServer is the server API for MasterListService service.
// All implementations must embed UnimplementedMasterListServiceServer
// for forward compatibility
type MasterListServiceServer interface {
	// CheckAndList Called by client.
	// Check args and list all directories or files under target path.
	CheckAndList(context.Context, *CheckAndListArgs) (*CheckAndListReply, error)
	mustEmbedUnimplementedMasterListServiceServer()
}

// UnimplementedMasterListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMasterListServiceServer struct {
}

func (UnimplementedMasterListServiceServer) CheckAndList(context.Context, *CheckAndListArgs) (*CheckAndListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAndList not implemented")
}
func (UnimplementedMasterListServiceServer) mustEmbedUnimplementedMasterListServiceServer() {}

// UnsafeMasterListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterListServiceServer will
// result in compilation errors.
type UnsafeMasterListServiceServer interface {
	mustEmbedUnimplementedMasterListServiceServer()
}

func RegisterMasterListServiceServer(s grpc.ServiceRegistrar, srv MasterListServiceServer) {
	s.RegisterService(&MasterListService_ServiceDesc, srv)
}

func _MasterListService_CheckAndList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAndListArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterListServiceServer).CheckAndList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MasterListService/CheckAndList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterListServiceServer).CheckAndList(ctx, req.(*CheckAndListArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterListService_ServiceDesc is the grpc.ServiceDesc for MasterListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MasterListService",
	HandlerType: (*MasterListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAndList",
			Handler:    _MasterListService_CheckAndList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "List.proto",
}
