// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: MkDir.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterMkdirServiceClient is the client API for MasterMkdirService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterMkdirServiceClient interface {
	// CheckAndMkdir Called by client.
	// Check args and make directory at target path.
	CheckAndMkdir(ctx context.Context, in *CheckAndMkDirArgs, opts ...grpc.CallOption) (*CheckAndMkDirReply, error)
}

type masterMkdirServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterMkdirServiceClient(cc grpc.ClientConnInterface) MasterMkdirServiceClient {
	return &masterMkdirServiceClient{cc}
}

func (c *masterMkdirServiceClient) CheckAndMkdir(ctx context.Context, in *CheckAndMkDirArgs, opts ...grpc.CallOption) (*CheckAndMkDirReply, error) {
	out := new(CheckAndMkDirReply)
	err := c.cc.Invoke(ctx, "/pb.MasterMkdirService/CheckAndMkdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterMkdirServiceServer is the server API for MasterMkdirService service.
// All implementations must embed UnimplementedMasterMkdirServiceServer
// for forward compatibility
type MasterMkdirServiceServer interface {
	// CheckAndMkdir Called by client.
	// Check args and make directory at target path.
	CheckAndMkdir(context.Context, *CheckAndMkDirArgs) (*CheckAndMkDirReply, error)
	mustEmbedUnimplementedMasterMkdirServiceServer()
}

// UnimplementedMasterMkdirServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMasterMkdirServiceServer struct {
}

func (UnimplementedMasterMkdirServiceServer) CheckAndMkdir(context.Context, *CheckAndMkDirArgs) (*CheckAndMkDirReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAndMkdir not implemented")
}
func (UnimplementedMasterMkdirServiceServer) mustEmbedUnimplementedMasterMkdirServiceServer() {}

// UnsafeMasterMkdirServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterMkdirServiceServer will
// result in compilation errors.
type UnsafeMasterMkdirServiceServer interface {
	mustEmbedUnimplementedMasterMkdirServiceServer()
}

func RegisterMasterMkdirServiceServer(s grpc.ServiceRegistrar, srv MasterMkdirServiceServer) {
	s.RegisterService(&MasterMkdirService_ServiceDesc, srv)
}

func _MasterMkdirService_CheckAndMkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAndMkDirArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterMkdirServiceServer).CheckAndMkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MasterMkdirService/CheckAndMkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterMkdirServiceServer).CheckAndMkdir(ctx, req.(*CheckAndMkDirArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterMkdirService_ServiceDesc is the grpc.ServiceDesc for MasterMkdirService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterMkdirService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MasterMkdirService",
	HandlerType: (*MasterMkdirServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAndMkdir",
			Handler:    _MasterMkdirService_CheckAndMkdir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MkDir.proto",
}
