// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: AddFile.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterAddClient is the client API for MasterAdd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterAddClient interface {
	CheckArgs4Add(ctx context.Context, in *CheckArgs4AddArgs, opts ...grpc.CallOption) (*CheckArgs4AddReply, error)
	GetDataNodes4Add(ctx context.Context, in *GetDataNodes4AddArgs, opts ...grpc.CallOption) (*GetDataNodes4AddReply, error)
}

type masterAddClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterAddClient(cc grpc.ClientConnInterface) MasterAddClient {
	return &masterAddClient{cc}
}

func (c *masterAddClient) CheckArgs4Add(ctx context.Context, in *CheckArgs4AddArgs, opts ...grpc.CallOption) (*CheckArgs4AddReply, error) {
	out := new(CheckArgs4AddReply)
	err := c.cc.Invoke(ctx, "/pb.MasterAdd/CheckArgs4Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterAddClient) GetDataNodes4Add(ctx context.Context, in *GetDataNodes4AddArgs, opts ...grpc.CallOption) (*GetDataNodes4AddReply, error) {
	out := new(GetDataNodes4AddReply)
	err := c.cc.Invoke(ctx, "/pb.MasterAdd/GetDataNodes4Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterAddServer is the server API for MasterAdd service.
// All implementations must embed UnimplementedMasterAddServer
// for forward compatibility
type MasterAddServer interface {
	CheckArgs4Add(context.Context, *CheckArgs4AddArgs) (*CheckArgs4AddReply, error)
	GetDataNodes4Add(context.Context, *GetDataNodes4AddArgs) (*GetDataNodes4AddReply, error)
	mustEmbedUnimplementedMasterAddServer()
}

// UnimplementedMasterAddServer must be embedded to have forward compatible implementations.
type UnimplementedMasterAddServer struct {
}

func (UnimplementedMasterAddServer) CheckArgs4Add(context.Context, *CheckArgs4AddArgs) (*CheckArgs4AddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckArgs4Add not implemented")
}
func (UnimplementedMasterAddServer) GetDataNodes4Add(context.Context, *GetDataNodes4AddArgs) (*GetDataNodes4AddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataNodes4Add not implemented")
}
func (UnimplementedMasterAddServer) mustEmbedUnimplementedMasterAddServer() {}

// UnsafeMasterAddServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterAddServer will
// result in compilation errors.
type UnsafeMasterAddServer interface {
	mustEmbedUnimplementedMasterAddServer()
}

func RegisterMasterAddServer(s grpc.ServiceRegistrar, srv MasterAddServer) {
	s.RegisterService(&MasterAdd_ServiceDesc, srv)
}

func _MasterAdd_CheckArgs4Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckArgs4AddArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterAddServer).CheckArgs4Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MasterAdd/CheckArgs4Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterAddServer).CheckArgs4Add(ctx, req.(*CheckArgs4AddArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterAdd_GetDataNodes4Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataNodes4AddArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterAddServer).GetDataNodes4Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MasterAdd/GetDataNodes4Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterAddServer).GetDataNodes4Add(ctx, req.(*GetDataNodes4AddArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterAdd_ServiceDesc is the grpc.ServiceDesc for MasterAdd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterAdd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MasterAdd",
	HandlerType: (*MasterAddServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckArgs4Add",
			Handler:    _MasterAdd_CheckArgs4Add_Handler,
		},
		{
			MethodName: "GetDataNodes4Add",
			Handler:    _MasterAdd_GetDataNodes4Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AddFile.proto",
}
