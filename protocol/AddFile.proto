syntax="proto3";
package pb;
option go_package="/pb";

// CheckArgs4AddArgs
// path: target path to add file
// fileName: name of the file to be added
// size: size of the file. Use bytes as the unit of measurement which means 1kb will be 1024.
message CheckArgs4AddArgs {
  string path = 1;
  string fileName = 2;
  int64 size = 3;
}

// CheckArgs4AddReply
// fileNodeId: file id stored in the directory tree
// chunkNum: the number of chunks the file will be cut into
message CheckArgs4AddReply {
  string fileNodeId = 1;
  int32 chunkNum = 2;
}

// GetDataNodes4AddArgs
// fileNodeId: file id stored in the directory tree
// chunkIndex: the index of chunk
message GetDataNodes4AddArgs {
  string fileNodeId = 1;
  int32 chunkIndex = 2;
}

// GetDataNodes4AddReply
// dataNodes: ids of all DataNodes that will store this chunk
message GetDataNodes4AddReply {
  repeated string dataNodeIds = 1;
  repeated string dataNodes = 2;
}

// UnlockDic4AddArgs
// fileNodeId: id of FileNode which has been stored by chunkserver and need to be unlocked.
message UnlockDic4AddArgs {
  string fileNodeId = 1;
  string filePath = 2;
  repeated ChunkInfo4Add infos = 3;
  repeated string failChunkIds = 4;
}

message UnlockDic4AddReply {

}

// ReleaseLease4AddArgs
// chunkId: id of chunk which has been stored by chunkserver and need to release its lease
message Callback4AddArgs {
  string fileNodeId = 1;
  repeated ChunkInfo4Add infos = 2;
  repeated string failChunkIds = 3;
}

message Callback4AddReply {

}

message ChunkInfo4Add {
  string chunkId = 1;
  repeated string successNode = 2;
  repeated string failNode = 3;
}

service MasterAddService {
  // CheckArgs4Add Called by client.
  // Check whether the path and file name entered by the user in the Add operation are legal.
  rpc CheckArgs4Add(CheckArgs4AddArgs) returns(CheckArgs4AddReply);

  // GetDataNodes4Add Called by client.
  // Allocate some DataNode to store a Chunk and select the primary DataNode
  rpc GetDataNodes4Add(GetDataNodes4AddArgs) returns(GetDataNodes4AddReply);

  // UnlockDic4Add Called by client.
  // Unlock all FileNodes in the target path which is used to add file.
  rpc UnlockDic4Add(UnlockDic4AddArgs) returns(UnlockDic4AddReply);

  // ReleaseLease4Add Called by client.
  // Release the lease of a chunk.
  rpc Callback4Add(Callback4AddArgs) returns(Callback4AddReply);
}

// TransferChunkArgs
// piece: a chunk will be split into pieces to send using stream
message PieceOfChunk {
  bytes piece = 1;
}

// TransferChunkReply
message TransferChunkReply {
  string chunkId = 1;
  repeated string failAdds = 2;
}

service PipLineService {
  // TransferFile Called by client or chunkserver.
  // Transfer a chunk of the file to a chunkserver using stream and let that chunkserver transfer
  // this chunk to another chunkserver if needed.
  rpc TransferChunk(stream PieceOfChunk) returns(TransferChunkReply);
}
